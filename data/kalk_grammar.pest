document = {soi ~ (statement ~ (newline+ | &eoi))* ~ eoi}

// Statements

statement = {assignment | condition}
assignment = {identifier ~ &":=" ~ operator ~ expression}

// Expressions

expression = {sum | prod | negate | exp | atomic_expr}
atomic_expr = _{"(" ~ expression ~ ")" | identifier | literal}

sum = {(prod | negate | exp | atomic_expr) ~ (&("+" | "-") ~ operator ~ (prod | exp | atomic_expr))+}
prod = {
    (negate | exp | atomic_expr) ~ (
        &("*" | "/") ~ operator ~ (negate | exp | atomic_expr)
        | (exp | atomic_expr)
    )+
}
negate = {"-" ~ (exp | atomic_expr)}
exp = {atomic_expr ~ (&"^" ~ operator ~ (negate | exp | atomic_expr))+}

// Conditions

condition = {or | and | compare | not | atomic_cond}
atomic_cond = _{"(" ~ condition ~ ")"}

or = {(and | compare | not | atomic_cond) ~ (&"||" ~ operator ~ (and | compare | not | atomic_cond))+}
and = {(compare | not | atomic_cond) ~ (&"&&" ~ operator ~ (compare | not | atomic_cond))+}
compare = {expression ~ (&compare_op ~ operator ~ expression)+}
not = {&"!" ~ operator ~ atomic_cond}

// Operators

operator = {compare_op | logical_op | arithm_op | ":=" | "#"}
compare_op = _{"=" | "!=" | "<" | ">" | "<=" | ">="}
logical_op = _{"!" | "&&" | "||"}
arithm_op = _{"+" | "-" | "*" | "/" | "^"}

// Literals

identifier = @{alpha ~ (alpha | digit | "_")*}
literal = {number}
number = @{digit+ ~ ("." ~ digit+)?}

// Basics

digit = _{'0'..'9'}
alpha = _{'a'..'z' | 'A'..'Z'}
comment = _{"--" ~ (!newline ~ any)*}
newline = _{"\r\n" | "\n\r" | "\n" | "\r"}
whitespace = _{" " | "\t"}
